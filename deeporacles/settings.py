"""
Django settings for deeporacles project.

Generated by 'django-admin startproject' using Django 3.2.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
import os
import django_heroku
from pathlib import Path
import mimetypes
from decouple import config
from datetime import timedelta


mimetypes.add_type("text/css", ".css", True)

# mimetypes.add_type("text/js", ".js", True)


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/


# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY')

OPENAI_KEY = config('OPEN_AI_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG',cast=bool)

ALLOWED_HOSTS = ['*', '127.0.0.1', '.vercel.app']

TAGGIT_CASE_INSENSITIVE = True

PRODUCTS_PER_ROW = 12

# Application definition

INSTALLED_APPS = [

    # from django
    # 'daphne',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'django.contrib.humanize',

    # packages

    'rest_framework',
    'rest_framework.authtoken',
    'rest_auth.registration',
    'rest_auth',
    # allauth
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
    'allauth.socialaccount.providers.facebook',
    'allauth.socialaccount.providers.twitter',
    'channels',
    'froala_editor',
    'django_social_share',
    'solo',
    'phonenumber_field',
    'djoser',
    'easy_thumbnails',
    'drf_yasg',
    'django_htmx',

    # 'django.contrib.gis',  # enable geodjango

    # apps
    'home',
    'accounts',
    'profiles',
    'circles',
    'utils',
    'noticeboard',
    'deepinfo',
    'settings',
    'contrib',
    'affiliate',
    'mypal',
    ]

MIDDLEWARE = [

    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'allauth.account.middleware.AccountMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'utils.middleware.HandleAllExceptionsMiddleware',
    'django_htmx.middleware.HtmxMiddleware',

]

# search optimization

ROOT_URLCONF = 'deeporacles.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR,'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',

                # personal processors

                'utils.context_processors.deeporacles',
                'utils.context_processors.deeporacles',
                'utils.context_processors.general_context',
                'utils.context_processors.users_list',
                'utils.utils.utils',

            ],
        },
    },
]

# WSGI_APPLICATION = get_wsgi_application()

ASGI_APPLICATION = 'deeporacles.routing.application'

# in production

# CHANNEL_LAYERS = {
#     'default': {
#         'BACKEND': 'channels_redis.core.RedisChannelLayer',
#         'CONFIG': {
#             "hosts": [('127.0.0.1', 6379)],
#         },
#     },
# }

# disconnect this in production
CHANNEL_LAYERS = {
    "default":{
        "BACKEND":"channels.layers.InMemoryChannelLayer"
    },
}


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

# DATABASES = {

#     'default': {
#         'ENGINE': 'django.db.backends.postgresql',
#         'NAME': config('DB_NAME'),
#         'USER': config('DB_USER'),
#         'PASSWORD' : config('DB_PASSWORD'),
#         'PORT': config('DB_PORT'),
#         'HOST' : config('DB_HOST'),
#     }
# }

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv('POSTGRES_DB'),  # The name of the database
        'USER': os.getenv('PGUSER'),  # The database user
        'PASSWORD': os.getenv('PGPASSWORD'),  # The password for the database
        'HOST': os.getenv('PGHOST'),  # The host provided by Railway
        'PORT': os.getenv('PGPORT', '5432'),  # Default PostgreSQL port
    }
}


# allauth

AUTHENTICATION_BACKENDS = [
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',

    # `allauth` specific authentication methods, such as login by e-mail
    'allauth.account.auth_backends.AuthenticationBackend',
]

# Provider specific settings
SOCIALACCOUNT_PROVIDERS = {
   'facebook': {
        'METHOD': 'oauth2',
        'SDK_URL': '//connect.facebook.net/{locale}/sdk.js',
        'SCOPE': ['email', 'public_profile'],
        'AUTH_PARAMS': {'auth_type': 'reauthenticate'},
        'INIT_PARAMS': {'cookie': True},
        'FIELDS': [
            'id',
            'first_name',
            'last_name',
            'middle_name',
            'name',
            'name_format',
            'picture',
            'short_name'
        ],
        'EXCHANGE_TOKEN': True,
        'LOCALE_FUNC': 'path.to.callable',
        'VERIFIED_EMAIL': False,
        'VERSION': 'v13.0',
    },
    'google': {
        # For each OAuth based provider, either add a ``SocialApp``
        # (``socialaccount`` app) containing the required client
        # credentials, or list them here:
        "APP": {
            "client_id": "123",
            "secret": "456",
            "key": ""
        },
        # These are provider-specific settings that can only be
        # listed here:
        'SCOPE': [
            'profile',
            'email',
        ],
        'AUTH_PARAMS': {
            'access_type': 'online',
        },
        'OAUTH_PKCE_ENABLED': True,
    }
}

#  File Format
IMAGE_EXTENSIONS = ['jpeg', 'jpg', 'gif', 'png', 'pict', 'ico', 'tiff', 'ai', 'webp', 'eps', 'cdr']
VIDEO_EXTENSIONS = ['mp4', 'avi', 'wmv', 'mov', '3gp', 'flv', 'webm']
AUDIO_EXTENSIONS = ['wav', 'aif', 'mp3', 'mid', '.opus','flac']


MAX_IMAGE_SIZE = 3145728  # 3  MB (3 * 1024 * 1024)
MAX_VIDEO_SIZE = 20971520  # 20 MB
MAX_AUDIO_SIZE = 5242880  # 5  MB (5 * 1024 * 1024)

SESSION_COOKIE_AGE = 2592000 # 30 days (60 * 60 * 24 * 30)
CART_SESSION_ID = 'cart'
FORCE_SESSION_TO_ONE = False
FORCE_INACTIVE_USER_ENDSESSION= False
TITLE = "DeepOracles"
AUTH_USER_MODEL = 'accounts.User'
SITE_TITLE = 'DeepOracles Admin'
SITE_HEADER = 'DeepOracles Administration'
SITE_NAME = 'DeepOracles'
META_KEYWORDS = 'Social Blogging Platform' 
META_DESCRIPTION = 'DeepOracles is a social blog'

SITE_ID = 1
AUTH_LOGIN_ROUTE = 'admin-login'
LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'
LOGIN_URL = 'login'
BASE_URL = '127.0.0.1:8000'


EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD')

SITE_PHONE=os.environ.get('SITE_PHONE')

# mailchimp mailing list

# this should be kept secret in production
MAILCHIMP_API_KEY = os.environ.get('MAILCHIMP_API_KEY')
MAILCHIMP_DATA_CENTER = "us17"
# this should be kept secret in production
MAILCHIMP_EMAIL_LIST_ID = os.environ.get('MAILCHIMP_EMAIL_LIST_ID')

FROALA_INCLUDE_JQUERY = False

REST_SESSION_LOGIN = True
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_AUTHENTICATION_METHOD = 'username'
ACCOUNT_EMAIL_VERIFICATION = 'optional'


REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'PAGE_SIZE': 10, 
    # 'EXCEPTION_HANDLER': 'rest_framework.exceptions.exception_handler', 
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination', 
    'DEFAULT_PARSER_CLASSES': (
        'rest_framework.parsers.JSONParser', 'rest_framework.parsers.FormParser', 
        'rest_framework.parsers.MultiPartParser'
    ),
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
        # If you're performance testing, you will want to use the browseable API
        # without forms, as the forms can generate their own queries.
        # If performance testing, enable:
        # 'example.utils.BrowsableAPIRendererWithoutForms',
        # Otherwise, to play around with the browseable API, enable:
        'rest_framework.renderers.BrowsableAPIRenderer'
    ),
    'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.openapi.AutoSchema', 
    'SEARCH_PARAM': 'filter[search]',
}

SIMPLE_JWT = {
    'AUTH_HEADER_TYPES': ('Bearer',),
    'ACCESS_TOKEN_LIFETIME': timedelta(days=1),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'BLACKLIST_AFTER_ROTATION': False,
}
SWAGGER_SETTINGS = {
    'SECURITY_DEFINITIONS': {
        'basic': {
            'type': 'basic',
        },
        'Bearer': {
            'type': 'Bearer',
            'name': 'Authorization',
            'in': 'header'
        }
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/
STATIC_URL = "static/"
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_DIRS = [ "static/",
    BASE_DIR / "static/"
]
# heroku deployment
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage' 
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media/')
TEMP = os.path.join(BASE_DIR, 'media/temp')


# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

LOGGING = {
   'version': 1,
   'disable_existing_loggers': False,
   'handlers': {
       'file': {
           'level': 'ERROR',
           'class': 'logging.FileHandler',
           'filename': 'django_error.log',
       },
   },
   'loggers': {
       'django': {
           'handlers': ['file'],
           'level': 'ERROR',
           'propagate': True,
       },
   },
}


django_heroku.settings(locals())
